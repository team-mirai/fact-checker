name: Deploy Infrastructure
on:
  push:
    branches: ['**']

permissions:
  contents: read
  id-token: write

env:
  ENABLE_DOCKER_BUILD: false
  ENABLE_TERRAFORM_APPLY: false
  ENABLE_PRODUCTION_DEPLOY: false
  
  REGION: asia-northeast1

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      branch_name: ${{ steps.env.outputs.branch_name }}
      app_name: ${{ steps.env.outputs.app_name }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set Environment Variables
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "app_name=x-fact-checker-prod" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "app_name=x-fact-checker-staging" >> $GITHUB_OUTPUT
          fi
          echo "branch_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          
          echo "=== Environment Detection ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Environment: $([ "${{ github.ref }}" = "refs/heads/main" ] && echo "production" || echo "staging")"
          echo "App Name: $([ "${{ github.ref }}" = "refs/heads/main" ] && echo "x-fact-checker-prod" || echo "x-fact-checker-staging")"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ./infrastructure
        run: |
          echo "🔍 Terraform構文チェック実行"
          terraform validate
          echo "✅ Terraform構文チェック成功"
      
      - name: Terraform Plan (Dry Run)
        working-directory: ./infrastructure
        env:
          TF_VAR_gcp_project_id: "dummy-project-id"
          TF_VAR_branch_name: ${{ steps.env.outputs.branch_name }}
        run: |
          echo "🔍 Terraform Plan実行（実際のリソース作成なし）"
          if terraform plan -out=tfplan 2>&1 | tee plan_output.log | grep -q "could not find default credentials"; then
            echo "⚠️ CI環境のため認証情報なし - 構文チェックは完了"
            echo "✅ Terraform構文・モジュール構造は正常"
            exit 0
          else
            terraform plan -out=tfplan
            echo "✅ Terraform Plan成功"
          fi
          
          echo "=== 安全弁状況 ==="
          echo "ENABLE_DOCKER_BUILD: ${{ env.ENABLE_DOCKER_BUILD }}"
          echo "ENABLE_TERRAFORM_APPLY: ${{ env.ENABLE_TERRAFORM_APPLY }}"
          echo "ENABLE_PRODUCTION_DEPLOY: ${{ env.ENABLE_PRODUCTION_DEPLOY }}"

  docker-build:
    needs: validate
    runs-on: ubuntu-latest
    if: vars.ENABLE_DOCKER_BUILD == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Build and Push Docker Image
        env:
          APP_NAME: ${{ needs.validate.outputs.app_name }}
        run: |
          echo "🐳 Dockerイメージビルド開始"
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/fact-checker-repo/${{ env.APP_NAME }}:${{ github.sha }}"
          gcloud builds submit --tag "$IMAGE" --quiet
          echo "✅ Dockerイメージビルド成功: $IMAGE"

  terraform-apply:
    needs: [validate, docker-build]
    runs-on: ubuntu-latest
    if: vars.ENABLE_TERRAFORM_APPLY == 'true' && (github.ref != 'refs/heads/main' || vars.ENABLE_PRODUCTION_DEPLOY == 'true')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init
      
      - name: Terraform Apply
        working-directory: ./infrastructure
        env:
          TF_VAR_gcp_project_id: ${{ secrets.PROJECT_ID }}
          TF_VAR_branch_name: ${{ needs.validate.outputs.branch_name }}
          TF_VAR_region: ${{ env.REGION }}
        run: |
          echo "🚀 Terraform Apply実行開始"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "App Name: ${{ needs.validate.outputs.app_name }}"
          
          terraform apply -auto-approve
          echo "✅ Terraform Apply成功"
      
      - name: Get Service URL
        working-directory: ./infrastructure
        run: |
          SERVICE_URL=$(terraform output -raw service_url)
          echo "🌐 デプロイ完了: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

  safety-report:
    needs: [validate]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Safety Status Report
        run: |
          echo "=== 🔒 安全弁状況レポート ==="
          echo "ENABLE_DOCKER_BUILD: ${{ vars.ENABLE_DOCKER_BUILD }}"
          echo "ENABLE_TERRAFORM_APPLY: ${{ vars.ENABLE_TERRAFORM_APPLY }}"
          echo "ENABLE_PRODUCTION_DEPLOY: ${{ vars.ENABLE_PRODUCTION_DEPLOY }}"
          echo ""
          echo "=== 📋 実行結果 ==="
          echo "✅ Phase 1 (Validate): 常に実行"
          echo "$([ '${{ vars.ENABLE_DOCKER_BUILD }}' = 'true' ] && echo '✅' || echo '❌') Phase 2 (Docker Build): ${{ vars.ENABLE_DOCKER_BUILD }}"
          echo "$([ '${{ vars.ENABLE_TERRAFORM_APPLY }}' = 'true' ] && echo '✅' || echo '❌') Phase 3 (Terraform Apply): ${{ vars.ENABLE_TERRAFORM_APPLY }}"
          echo ""
          echo "=== 📖 次のステップ ==="
          if [ "${{ vars.ENABLE_DOCKER_BUILD }}" != "true" ]; then
            echo "1. ENABLE_DOCKER_BUILD=trueに設定してDockerビルドをテスト"
          elif [ "${{ vars.ENABLE_TERRAFORM_APPLY }}" != "true" ]; then
            echo "2. ENABLE_TERRAFORM_APPLY=trueに設定してTerraformデプロイをテスト"
          elif [ "${{ vars.ENABLE_PRODUCTION_DEPLOY }}" != "true" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "3. ENABLE_PRODUCTION_DEPLOY=trueに設定して本番デプロイを有効化"
          else
            echo "🎉 全ての安全弁が適切に設定されています"
          fi
